"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(require("./union"));
__export(require("./tuple"));
exports.nul = { tsType: null, runtimeType: 'null' };
exports.bool = { tsType: false, runtimeType: 'boolean' };
exports.num = { tsType: 0, runtimeType: 'number' };
exports.str = { tsType: '', runtimeType: 'string' };
function literal(literal) {
    return { tsType: literal, runtimeType: { base: 'literal', value: literal } };
}
exports.literal = literal;
function opt(elem) {
    return {
        tsType: undefined,
        runtimeType: { base: 'optional', element: elem.runtimeType }
    };
}
exports.opt = opt;
function arr(elem) {
    return {
        tsType: [],
        runtimeType: { base: 'array', element: elem.runtimeType }
    };
}
exports.arr = arr;
function obj(o) {
    var keyValues = {};
    for (var _i = 0, _a = Object.entries(o); _i < _a.length; _i++) {
        var _b = _a[_i], key = _b[0], value = _b[1];
        keyValues[key] = value.runtimeType;
    }
    return {
        tsType: {},
        runtimeType: {
            base: 'object',
            keyValues: keyValues
        }
    };
}
exports.obj = obj;
function isValid(runtimeType, obj) {
    switch (runtimeType) {
        case 'null':
            return obj === null;
        case 'boolean':
            return typeof obj === 'boolean';
        case 'number':
            return typeof obj === 'number';
        case 'string':
            return typeof obj === 'string';
        default:
            switch (runtimeType.base) {
                case 'literal':
                    return obj === runtimeType.value;
                case 'optional':
                    return obj === undefined || isValid(runtimeType.element, obj);
                case "union":
                    return runtimeType.elements.some(function (t) { return isValid(t, obj); });
                case "array":
                    return obj instanceof Array && obj.every(function (e) { return isValid(runtimeType.element, e); });
                case "tuple":
                    return obj instanceof Array &&
                        runtimeType.elements.length === obj.length &&
                        runtimeType.elements.every(function (typ, i) { return isValid(typ, obj[i]); });
                case "object":
                    if (obj === null || typeof obj !== 'object') {
                        return false;
                    }
                    return Object.entries(runtimeType.keyValues).every(function (_a) {
                        var key = _a[0], typ = _a[1];
                        return isValid(typ, obj[key]);
                    });
            }
    }
    throw new Error("Unexpected error in isValid(): " + runtimeType + ", " + obj);
}
exports.isValid = isValid;
function validate(format, obj) {
    return isValid(format.runtimeType, obj) ? obj : undefined;
}
exports.validate = validate;
function validatingParse(format, jsonString) {
    return validate(format, JSON.parse(jsonString));
}
exports.validatingParse = validatingParse;
//# sourceMappingURL=index.js.map