import { Union } from "./union";
import { Tuple } from "./tuple";
export * from "./union";
export * from "./tuple";
export declare type Json = Null | Boolean | Number | String | Literal<unknown> | Union | Tuple | Optional<any> | Array<any> | Object<{
    [key: string]: Json;
}>;
export declare type JsonRuntimeType = 'null' | 'boolean' | 'number' | 'string' | {
    base: 'literal';
    value: any;
} | {
    base: 'optional';
    element: JsonRuntimeType;
} | {
    base: 'array';
    element: JsonRuntimeType;
} | {
    base: 'tuple';
    elements: JsonRuntimeType[];
} | {
    base: 'union';
    elements: JsonRuntimeType[];
} | {
    base: 'object';
    keyValues: {
        [key: string]: JsonRuntimeType;
    };
};
export declare type TsType<J extends Json> = J['tsType'];
export interface Null {
    tsType: null;
    runtimeType: 'null';
}
export interface Boolean {
    tsType: boolean;
    runtimeType: 'boolean';
}
export interface Number {
    tsType: number;
    runtimeType: 'number';
}
export interface String {
    tsType: string;
    runtimeType: 'string';
}
export interface Literal<Lit> {
    tsType: Lit;
    runtimeType: JsonRuntimeType;
}
export interface Optional<T extends Json> {
    tsType: T['tsType'] | undefined;
    runtimeType: {
        base: 'optional';
        element: JsonRuntimeType;
    };
}
export interface Array<T extends Json> {
    tsType: T['tsType'][];
    runtimeType: {
        base: 'array';
        element: JsonRuntimeType;
    };
}
declare type NonOptionalKeys<Obj extends {
    [key: string]: Json;
}> = {
    [K in keyof Obj]: undefined extends Obj[K]['tsType'] ? never : K;
}[keyof Obj];
declare type OptionalKeys<Obj extends {
    [key: string]: Json;
}> = {
    [K in keyof Obj]: undefined extends Obj[K]['tsType'] ? K : never;
}[keyof Obj];
declare type NonOptionalObj<Obj extends {
    [key: string]: Json;
}> = Pick<Obj, NonOptionalKeys<Obj>>;
declare type OptionalObj<Obj extends {
    [key: string]: Json;
}> = Pick<Obj, OptionalKeys<Obj>>;
export interface Object<O extends {
    [key: string]: Json;
}> {
    tsType: {
        [K in keyof NonOptionalObj<O>]: O[K]['tsType'];
    } & {
        [K in keyof OptionalObj<O>]?: O[K]['tsType'];
    };
    runtimeType: {
        base: 'object';
        keyValues: {
            [key: string]: JsonRuntimeType;
        };
    };
}
export declare const nul: Null;
export declare const bool: Boolean;
export declare const num: Number;
export declare const str: String;
export declare function literal<Lit>(literal: Lit): Literal<Lit>;
export declare function opt<T extends Json>(elem: T): Optional<T>;
export declare function arr<T extends Json>(elem: T): Array<T>;
export declare function obj<T extends {
    [key: string]: Json;
}>(o: T): Object<T>;
export declare function isValid(runtimeType: JsonRuntimeType, obj: any): boolean;
export declare function validate<J extends Json>(format: J, obj: any): TsType<J> | undefined;
export declare function validatingParse<J extends Json>(format: J, jsonString: string): TsType<J> | undefined;
