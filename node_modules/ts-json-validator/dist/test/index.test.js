"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var assert = require("power-assert");
var src_1 = require("../src");
var humanFormat = src_1.obj({
    name: src_1.str,
    age: src_1.num,
    isHuman: src_1.opt(src_1.bool),
    aliases: src_1.arr(src_1.str),
    myObj: src_1.obj({
        bos: src_1.str,
        bosAge: src_1.num,
    }),
    myUnion: src_1.union(src_1.num, src_1.bool),
    objs: src_1.arr(src_1.obj({
        prop1: src_1.str,
        prop2: src_1.num
    })),
    myLit: src_1.literal('POST'),
    myLitUnion: src_1.union(src_1.literal('POST'), src_1.literal('GET')),
    myNullable: src_1.union(src_1.str, src_1.nul),
    onlyNull: src_1.nul,
    myTuple: src_1.tuple(src_1.str, src_1.num, src_1.bool),
});
describe('ts-json-validator', function () {
    it('should define a human without compile error', function () {
        var human = {
            name: "jack",
            age: 4,
            aliases: ['world', 'abc'],
            myObj: {
                bos: 'adam',
                bosAge: 8
            },
            myUnion: false,
            objs: [{
                    prop1: 'hello',
                    prop2: 3
                }],
            myLit: 'POST',
            myLitUnion: 'GET',
            myNullable: 'hey',
            onlyNull: null,
            myTuple: ['my text', 14, false],
        };
    });
    it('should define optional property in object array without compile error', function () {
        var myFormat = src_1.obj({
            oth: src_1.arr(src_1.obj({
                r: src_1.opt(src_1.str),
            })),
        });
        var a = { oth: [] };
        var b = a;
    });
    context('isValid', function () {
        it('should validate null', function () {
            var objFormat = src_1.nul;
            assert.strictEqual(src_1.isValid(objFormat.runtimeType, null), true);
            assert.strictEqual(src_1.isValid(objFormat.runtimeType, 'my text'), false);
        });
        it('should validate number', function () {
            var objFormat = src_1.num;
            var obj1 = 19;
            assert.strictEqual(src_1.isValid(objFormat.runtimeType, obj1), true);
        });
        it('should validate string', function () {
            var objFormat = src_1.str;
            var obj1 = 'hello';
            assert.strictEqual(src_1.isValid(objFormat.runtimeType, obj1), true);
        });
        it('should validate optional', function () {
            var objFormat = src_1.opt(src_1.str);
            assert.strictEqual(src_1.isValid(objFormat.runtimeType, 'my text'), true);
            assert.strictEqual(src_1.isValid(objFormat.runtimeType, undefined), true);
        });
        it('should validate literal', function () {
            var objFormat = src_1.literal('my-literal');
            var obj1 = 'my-literal';
            assert.strictEqual(src_1.isValid(objFormat.runtimeType, 'my-literal'), true);
            assert.strictEqual(src_1.isValid(objFormat.runtimeType, 'my-lit'), false);
        });
        it('should validate union', function () {
            var objFormat = src_1.union(src_1.str, src_1.num);
            assert.strictEqual(src_1.isValid(objFormat.runtimeType, 'hello'), true);
            assert.strictEqual(src_1.isValid(objFormat.runtimeType, 19), true);
            assert.strictEqual(src_1.isValid(objFormat.runtimeType, true), false);
        });
        it('should validate should tuple', function () {
            var objFormat = src_1.tuple(src_1.str, src_1.num);
            assert.strictEqual(src_1.isValid(objFormat.runtimeType, ['hello', 40]), true);
            assert.strictEqual(src_1.isValid(objFormat.runtimeType, ['hello', true]), false);
        });
        it('should validate should array', function () {
            var objFormat = src_1.arr(src_1.str);
            var obj1 = ['hello', 'world'];
            assert.strictEqual(src_1.isValid(objFormat.runtimeType, obj1), true);
        });
        it('should validate object', function () {
            var objFormat = src_1.obj({
                name: src_1.str,
                age: src_1.num
            });
            var obj1 = {
                name: "jack",
                age: 4
            };
            assert.strictEqual(src_1.isValid(objFormat.runtimeType, obj1), true);
        });
        it('should validate complex nested object', function () {
            var human = {
                name: "jack",
                age: 4,
                aliases: ['world', 'abc'],
                myObj: {
                    bos: 'adam',
                    bosAge: 8
                },
                myUnion: false,
                objs: [{
                        prop1: 'hello',
                        prop2: 3
                    }],
                myLit: 'POST',
                myLitUnion: 'GET',
                myNullable: 'hey',
                onlyNull: null,
                myTuple: ['my text', 14, false],
            };
            assert.strictEqual(src_1.isValid(humanFormat.runtimeType, human), true);
        });
    });
    context('validatingParse', function () {
        it('should parse with validation', function () {
            var objFormat = src_1.obj({
                name: src_1.str,
                age: src_1.num
            });
            var json1 = '{"name": "jack", "age": 4}';
            assert.deepStrictEqual(src_1.validatingParse(objFormat, json1), { name: "jack", age: 4 });
            var json2 = '{"name": "jack", "age": true}';
            assert.deepStrictEqual(src_1.validatingParse(objFormat, json2), undefined);
            var json3 = '{"name": "jack", "age": 4, "isHuman": true}';
            assert.deepStrictEqual(src_1.validatingParse(objFormat, json3), { name: "jack", age: 4, isHuman: true });
        });
    });
});
//# sourceMappingURL=index.test.js.map